{"ast":null,"code":"export default {\n  name: 'NoticeView',\n  data() {\n    return {\n      notices: [],\n      // 이 부분은 실제 데이터로 채워주세요.\n      filterStartDate: '',\n      filterEndDate: '',\n      filterCategory: '',\n      currentPage: 1,\n      noticesPerPage: 20\n    };\n  },\n  computed: {\n    filteredNotices() {\n      const startDate = new Date(this.filterStartDate);\n      const endDate = new Date(this.filterEndDate);\n      endDate.setDate(endDate.getDate() + 1);\n      return this.notices.filter(notice => {\n        const noticeDate = new Date(notice.date);\n        return (this.filterCategory === '' || notice.category === this.filterCategory) && noticeDate >= startDate && noticeDate < endDate;\n      });\n    },\n    paginatedNotices() {\n      const start = (this.currentPage - 1) * this.noticesPerPage;\n      return this.filteredNotices.slice(start, start + this.noticesPerPage);\n    },\n    maxPage() {\n      return Math.ceil(this.filteredNotices.length / this.noticesPerPage);\n    }\n  },\n  methods: {\n    applyFilter() {\n      // 필터가 적용되면 페이지를 다시 렌더링합니다.\n      this.currentPage = 1;\n    },\n    nextPage() {\n      if (this.currentPage < this.maxPage) {\n        this.currentPage++;\n      }\n    },\n    previousPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","notices","filterStartDate","filterEndDate","filterCategory","currentPage","noticesPerPage","computed","filteredNotices","startDate","Date","endDate","setDate","getDate","filter","notice","noticeDate","date","category","paginatedNotices","start","slice","maxPage","Math","ceil","length","methods","applyFilter","nextPage","previousPage"],"sources":["D:\\바탕화면 파일\\Dev\\html\\vue-web-asgm\\src\\views\\NoticeView.vue"],"sourcesContent":["<template>\r\n    <div class=\"Notice\">\r\n      <h1>공지사항</h1>\r\n      <div>\r\n        <label>시작 날짜:</label>\r\n        <input type=\"date\" v-model=\"filterStartDate\" />\r\n        <label>끝 날짜:</label>\r\n        <input type=\"date\" v-model=\"filterEndDate\" />\r\n        <label>카테고리:</label>\r\n        <select v-model=\"filterCategory\">\r\n          <!-- 이 부분은 실제 카테고리 데이터로 채워주세요. -->\r\n          <option value=\"\">모든 카테고리</option>\r\n          <option value=\"category1\">카테고리 1</option>\r\n          <option value=\"category2\">카테고리 2</option>\r\n        </select>\r\n        <button @click=\"applyFilter\">필터 적용</button>\r\n      </div>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>공지사항 번호</th>\r\n            <th>제목</th>\r\n            <th>카테고리</th>\r\n            <th>날짜</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"notice in paginatedNotices\" :key=\"notice.id\">\r\n            <td>{{ notice.id }}</td>\r\n            <td>{{ notice.title }}</td>\r\n            <td>{{ notice.category }}</td>\r\n            <td>{{ notice.date }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <button @click=\"previousPage\" :disabled=\"currentPage === 1\">이전 페이지</button>\r\n      <button @click=\"nextPage\" :disabled=\"currentPage === maxPage\">다음 페이지</button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'NoticeView',\r\n    data () {\r\n      return {\r\n        notices: [], // 이 부분은 실제 데이터로 채워주세요.\r\n        filterStartDate: '',\r\n        filterEndDate: '',\r\n        filterCategory: '',\r\n        currentPage: 1,\r\n        noticesPerPage: 20,\r\n      }\r\n    },\r\n    computed: {\r\n      filteredNotices () {\r\n        const startDate = new Date(this.filterStartDate)\r\n        const endDate = new Date(this.filterEndDate)\r\n        endDate.setDate(endDate.getDate() + 1)\r\n        return this.notices.filter((notice) => {\r\n          const noticeDate = new Date(notice.date)\r\n          return (this.filterCategory === '' || notice.category === this.filterCategory) && noticeDate >= startDate && noticeDate < endDate\r\n        })\r\n      },\r\n      paginatedNotices () {\r\n        const start = (this.currentPage - 1) * this.noticesPerPage\r\n        return this.filteredNotices.slice(start, start + this.noticesPerPage)\r\n      },\r\n      maxPage () {\r\n        return Math.ceil(this.filteredNotices.length / this.noticesPerPage)\r\n      },\r\n    },\r\n    methods: {\r\n      applyFilter () {\r\n        // 필터가 적용되면 페이지를 다시 렌더링합니다.\r\n        this.currentPage = 1\r\n      },\r\n      nextPage () {\r\n        if (this.currentPage < this.maxPage) {\r\n          this.currentPage++\r\n        }\r\n      },\r\n      previousPage () {\r\n        if (this.currentPage > 1) {\r\n          this.currentPage--\r\n        }\r\n      },\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* 여기에 CSS 스타일링을 추가하세요 */\r\n  </style>\r\n  "],"mappings":"AAyCE,eAAe;EACbA,IAAI,EAAE,YAAY;EAClBC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,OAAO,EAAE,EAAE;MAAE;MACbC,eAAe,EAAE,EAAE;MACnBC,aAAa,EAAE,EAAE;MACjBC,cAAc,EAAE,EAAE;MAClBC,WAAW,EAAE,CAAC;MACdC,cAAc,EAAE;IAClB;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAcA,CAAA,EAAK;MACjB,MAAMC,SAAQ,GAAI,IAAIC,IAAI,CAAC,IAAI,CAACR,eAAe;MAC/C,MAAMS,OAAM,GAAI,IAAID,IAAI,CAAC,IAAI,CAACP,aAAa;MAC3CQ,OAAO,CAACC,OAAO,CAACD,OAAO,CAACE,OAAO,CAAC,IAAI,CAAC;MACrC,OAAO,IAAI,CAACZ,OAAO,CAACa,MAAM,CAAEC,MAAM,IAAK;QACrC,MAAMC,UAAS,GAAI,IAAIN,IAAI,CAACK,MAAM,CAACE,IAAI;QACvC,OAAO,CAAC,IAAI,CAACb,cAAa,KAAM,EAAC,IAAKW,MAAM,CAACG,QAAO,KAAM,IAAI,CAACd,cAAc,KAAKY,UAAS,IAAKP,SAAQ,IAAKO,UAAS,GAAIL,OAAM;MAClI,CAAC;IACH,CAAC;IACDQ,gBAAeA,CAAA,EAAK;MAClB,MAAMC,KAAI,GAAI,CAAC,IAAI,CAACf,WAAU,GAAI,CAAC,IAAI,IAAI,CAACC,cAAa;MACzD,OAAO,IAAI,CAACE,eAAe,CAACa,KAAK,CAACD,KAAK,EAAEA,KAAI,GAAI,IAAI,CAACd,cAAc;IACtE,CAAC;IACDgB,OAAMA,CAAA,EAAK;MACT,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAAChB,eAAe,CAACiB,MAAK,GAAI,IAAI,CAACnB,cAAc;IACpE;EACF,CAAC;EACDoB,OAAO,EAAE;IACPC,WAAUA,CAAA,EAAK;MACb;MACA,IAAI,CAACtB,WAAU,GAAI;IACrB,CAAC;IACDuB,QAAOA,CAAA,EAAK;MACV,IAAI,IAAI,CAACvB,WAAU,GAAI,IAAI,CAACiB,OAAO,EAAE;QACnC,IAAI,CAACjB,WAAW,EAAC;MACnB;IACF,CAAC;IACDwB,YAAWA,CAAA,EAAK;MACd,IAAI,IAAI,CAACxB,WAAU,GAAI,CAAC,EAAE;QACxB,IAAI,CAACA,WAAW,EAAC;MACnB;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}